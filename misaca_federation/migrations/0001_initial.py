# Generated by Django 2.1.2 on 2018-10-15 11:01

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('username', models.TextField(unique=True)),
                ('domain', models.TextField(blank=True, null=True)),
                ('secret', models.TextField()),
                ('private_key', models.TextField(blank=True, null=True)),
                ('public_key', models.TextField()),
                ('remote_url', models.TextField()),
                ('salmon_url', models.TextField()),
                ('hub_url', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('note', models.TextField()),
                ('display_name', models.TextField()),
                ('uri', models.TextField()),
                ('url', models.TextField(blank=True, null=True)),
                ('avatar_file_name', models.TextField(blank=True, null=True)),
                ('avatar_content_type', models.TextField(blank=True, null=True)),
                ('avatar_file_size', models.IntegerField(blank=True, null=True)),
                ('avatar_updated_at', models.DateTimeField(blank=True, null=True)),
                ('header_file_name', models.TextField(blank=True, null=True)),
                ('header_content_type', models.TextField(blank=True, null=True)),
                ('header_file_size', models.IntegerField(blank=True, null=True)),
                ('header_updated_at', models.DateTimeField(blank=True, null=True)),
                ('avatar_remote_url', models.TextField(blank=True, null=True)),
                ('subscription_expires_at', models.DateTimeField(blank=True, null=True)),
                ('silenced', models.BooleanField()),
                ('suspended', models.BooleanField()),
                ('locked', models.BooleanField()),
                ('header_remote_url', models.TextField()),
                ('statuses_count', models.IntegerField()),
                ('followers_count', models.IntegerField()),
                ('following_count', models.IntegerField()),
                ('last_webfingered_at', models.DateTimeField(blank=True, null=True)),
                ('inbox_url', models.TextField()),
                ('outbox_url', models.TextField()),
                ('shared_inbox_url', models.TextField()),
                ('followers_url', models.TextField()),
                ('protocol', models.IntegerField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('memorial', models.BooleanField()),
                ('featured_collection_url', models.TextField(blank=True, null=True)),
                ('fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('actor_type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'accounts',
            },
        ),
        migrations.CreateModel(
            name='AccountDomainBlock',
            fields=[
                ('domain', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'account_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='AccountModerationNote',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'account_moderation_notes',
            },
        ),
        migrations.CreateModel(
            name='AdminActionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('action', models.TextField()),
                ('target_type', models.TextField(blank=True, null=True)),
                ('target_id', models.BigIntegerField(blank=True, null=True)),
                ('recorded_changes', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'admin_action_logs',
            },
        ),
        migrations.CreateModel(
            name='ArInternalMetadata',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'ar_internal_metadata',
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('dump_file_name', models.TextField(blank=True, null=True)),
                ('dump_content_type', models.TextField(blank=True, null=True)),
                ('dump_file_size', models.IntegerField(blank=True, null=True)),
                ('dump_updated_at', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'backups',
            },
        ),
        migrations.CreateModel(
            name='Block',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uri', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'blocks',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uri', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'conversations',
            },
        ),
        migrations.CreateModel(
            name='ConversationMute',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'conversation_mutes',
            },
        ),
        migrations.CreateModel(
            name='CustomEmoji',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('shortcode', models.TextField()),
                ('domain', models.TextField(blank=True, null=True)),
                ('image_file_name', models.TextField(blank=True, null=True)),
                ('image_content_type', models.TextField(blank=True, null=True)),
                ('image_file_size', models.IntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('disabled', models.BooleanField()),
                ('uri', models.TextField(blank=True, null=True)),
                ('image_remote_url', models.TextField(blank=True, null=True)),
                ('visible_in_picker', models.BooleanField()),
            ],
            options={
                'db_table': 'custom_emojis',
            },
        ),
        migrations.CreateModel(
            name='DeprecatedPreviewCard',
            fields=[
                ('url', models.TextField()),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image_file_name', models.TextField(blank=True, null=True)),
                ('image_content_type', models.TextField(blank=True, null=True)),
                ('image_file_size', models.IntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('type', models.IntegerField()),
                ('html', models.TextField()),
                ('author_name', models.TextField()),
                ('author_url', models.TextField()),
                ('provider_name', models.TextField()),
                ('provider_url', models.TextField()),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'deprecated_preview_cards',
            },
        ),
        migrations.CreateModel(
            name='DomainBlock',
            fields=[
                ('domain', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('severity', models.IntegerField(blank=True, null=True)),
                ('reject_media', models.BooleanField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='EmailDomainBlock',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('domain', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'email_domain_blocks',
            },
        ),
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'favourites',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('show_reblogs', models.BooleanField()),
                ('uri', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'follows',
            },
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('show_reblogs', models.BooleanField()),
                ('uri', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'follow_requests',
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.TextField()),
                ('uid', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'identities',
            },
        ),
        migrations.CreateModel(
            name='Import',
            fields=[
                ('type', models.IntegerField()),
                ('approved', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('data_file_name', models.TextField(blank=True, null=True)),
                ('data_content_type', models.TextField(blank=True, null=True)),
                ('data_file_size', models.IntegerField(blank=True, null=True)),
                ('data_updated_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'imports',
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('max_uses', models.IntegerField(blank=True, null=True)),
                ('uses', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'invites',
            },
        ),
        migrations.CreateModel(
            name='List',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'lists',
            },
        ),
        migrations.CreateModel(
            name='ListAccount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'list_accounts',
            },
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('file_file_name', models.TextField(blank=True, null=True)),
                ('file_content_type', models.TextField(blank=True, null=True)),
                ('file_file_size', models.IntegerField(blank=True, null=True)),
                ('file_updated_at', models.DateTimeField(blank=True, null=True)),
                ('remote_url', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('shortcode', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('type', models.IntegerField()),
                ('file_meta', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'media_attachments',
            },
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mentions',
            },
        ),
        migrations.CreateModel(
            name='Mute',
            fields=[
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hide_notifications', models.BooleanField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'mutes',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('activity_id', models.BigIntegerField()),
                ('activity_type', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'notifications',
            },
        ),
        migrations.CreateModel(
            name='OauthAccessGrant',
            fields=[
                ('token', models.CharField(max_length=255, unique=True)),
                ('expires_in', models.IntegerField()),
                ('redirect_uri', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('scopes', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'oauth_access_grants',
            },
        ),
        migrations.CreateModel(
            name='OauthAccessToken',
            fields=[
                ('token', models.CharField(max_length=255, unique=True)),
                ('refresh_token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('expires_in', models.IntegerField(blank=True, null=True)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('scopes', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'oauth_access_tokens',
            },
        ),
        migrations.CreateModel(
            name='OauthApplication',
            fields=[
                ('name', models.TextField()),
                ('uid', models.CharField(max_length=255, unique=True)),
                ('secret', models.TextField()),
                ('redirect_uri', models.TextField()),
                ('scopes', models.TextField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('superapp', models.BooleanField()),
                ('website', models.TextField(blank=True, null=True)),
                ('owner_type', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'oauth_applications',
            },
        ),
        migrations.CreateModel(
            name='PreviewCard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('url', models.CharField(max_length=255, unique=True)),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('image_file_name', models.TextField(blank=True, null=True)),
                ('image_content_type', models.TextField(blank=True, null=True)),
                ('image_file_size', models.IntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.IntegerField()),
                ('html', models.TextField()),
                ('author_name', models.TextField()),
                ('author_url', models.TextField()),
                ('provider_name', models.TextField()),
                ('provider_url', models.TextField()),
                ('width', models.IntegerField()),
                ('height', models.IntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('embed_url', models.TextField()),
            ],
            options={
                'db_table': 'preview_cards',
            },
        ),
        migrations.CreateModel(
            name='PreviewCardStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview_card_id', models.BigIntegerField()),
                ('status_id', models.BigIntegerField()),
            ],
            options={
                'db_table': 'preview_cards_statuses',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('status_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), size=None)),
                ('comment', models.TextField()),
                ('action_taken', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'reports',
            },
        ),
        migrations.CreateModel(
            name='ReportNote',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'report_notes',
            },
        ),
        migrations.CreateModel(
            name='SessionActivation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('session_id', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user_agent', models.TextField()),
                ('ip', models.GenericIPAddressField(blank=True, null=True)),
                ('web_push_subscription_id', models.BigIntegerField(blank=True, null=True)),
                ('access_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.OauthAccessToken')),
            ],
            options={
                'db_table': 'session_activations',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('var', models.TextField()),
                ('value', models.TextField(blank=True, null=True)),
                ('thing_type', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('thing_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'settings',
            },
        ),
        migrations.CreateModel(
            name='SiteUpload',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('var', models.CharField(max_length=255, unique=True)),
                ('file_file_name', models.TextField(blank=True, null=True)),
                ('file_content_type', models.TextField(blank=True, null=True)),
                ('file_file_size', models.IntegerField(blank=True, null=True)),
                ('file_updated_at', models.DateTimeField(blank=True, null=True)),
                ('meta', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'site_uploads',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('uri', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('url', models.TextField(blank=True, null=True)),
                ('sensitive', models.BooleanField()),
                ('visibility', models.IntegerField()),
                ('spoiler_text', models.TextField()),
                ('reply', models.BooleanField()),
                ('favourites_count', models.IntegerField()),
                ('reblogs_count', models.IntegerField()),
                ('language', models.TextField(blank=True, null=True)),
                ('conversation_id', models.BigIntegerField(blank=True, null=True)),
                ('local', models.NullBooleanField()),
                ('application_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'statuses',
            },
        ),
        migrations.CreateModel(
            name='StatusPins',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'status_pins',
            },
        ),
        migrations.CreateModel(
            name='StatusTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Status')),
            ],
            options={
                'db_table': 'statuses_tags',
            },
        ),
        migrations.CreateModel(
            name='StreamEntry',
            fields=[
                ('activity_id', models.BigIntegerField(blank=True, null=True)),
                ('activity_type', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('hidden', models.BooleanField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'stream_entries',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('callback_url', models.TextField()),
                ('secret', models.TextField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed', models.BooleanField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('last_successful_delivery_at', models.DateTimeField(blank=True, null=True)),
                ('domain', models.TextField(blank=True, null=True)),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='WebPushSubscription',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('endpoint', models.TextField()),
                ('key_p256dh', models.TextField()),
                ('key_auth', models.TextField()),
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('access_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='misaca_federation.OauthAccessToken')),
            ],
            options={
                'db_table': 'web_push_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='WebSetting',
            fields=[
                ('data', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'web_settings',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('email', models.CharField(max_length=255, unique=True)),
                ('encrypted_password', models.TextField()),
                ('reset_password_token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('reset_password_sent_at', models.DateTimeField(blank=True, null=True)),
                ('remember_created_at', models.DateTimeField(blank=True, null=True)),
                ('sign_in_count', models.IntegerField()),
                ('current_sign_in_at', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, db_column='last_sign_in_at', null=True)),
                ('current_sign_in_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_sign_in_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('admin', models.BooleanField()),
                ('confirmation_token', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('confirmation_sent_at', models.DateTimeField(blank=True, null=True)),
                ('unconfirmed_email', models.TextField(blank=True, null=True)),
                ('locale', models.TextField(blank=True, null=True)),
                ('encrypted_otp_secret', models.TextField(blank=True, null=True)),
                ('encrypted_otp_secret_iv', models.TextField(blank=True, null=True)),
                ('encrypted_otp_secret_salt', models.TextField(blank=True, null=True)),
                ('consumed_timestep', models.IntegerField(blank=True, null=True)),
                ('otp_required_for_login', models.BooleanField()),
                ('last_emailed_at', models.DateTimeField(blank=True, null=True)),
                ('otp_backup_codes', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('filtered_languages', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), size=None)),
                ('user_id', models.BigAutoField(db_column='id', primary_key=True, serialize=False)),
                ('disabled', models.BooleanField()),
                ('moderator', models.BooleanField()),
                ('remember_token', models.TextField(blank=True, null=True)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='misaca_federation.Account')),
            ],
            options={
                'db_table': 'users',
            },
            bases=('misaca_federation.account',),
        ),
        migrations.AddField(
            model_name='websetting',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='webpushsubscription',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='subscription',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='streamentry',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='statustag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Tag'),
        ),
        migrations.AddField(
            model_name='statuspins',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pinned', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='statuspins',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='is_pinned', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='status',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='statuses', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='status',
            name='in_reply_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='replies', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='status',
            name='in_reply_to_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='status',
            name='reblog_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='reblogs', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='status',
            name='tags',
            field=models.ManyToManyField(through='misaca_federation.StatusTag', to='misaca_federation.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='setting',
            unique_together={('thing_type', 'thing_id', 'var')},
        ),
        migrations.AddField(
            model_name='sessionactivation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reportnote',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='reportnote',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='report_notes', to='misaca_federation.Report'),
        ),
        migrations.AddField(
            model_name='report',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='report',
            name='action_taken_by_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='report',
            name='assigned_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='report',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reported', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='oauthapplication',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='oauthaccesstoken',
            name='application',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.OauthApplication'),
        ),
        migrations.AddField(
            model_name='oauthaccesstoken',
            name='resource_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='oauthaccessgrant',
            name='application',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.OauthApplication'),
        ),
        migrations.AddField(
            model_name='oauthaccessgrant',
            name='resource_owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='notifications', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='notification',
            name='from_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='mute',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutes', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='mute',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='muted_by', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='mention',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='mention',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='mentions', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='mediaattachment',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='mediaattachment',
            name='status',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='attachments', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='listaccount',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='listaccount',
            name='follow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Follow'),
        ),
        migrations.AddField(
            model_name='listaccount',
            name='list',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.List'),
        ),
        migrations.AddField(
            model_name='list',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='invite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='import',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='identity',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='identities', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='followrequest',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='followrequest',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='follow',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='follow',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Status'),
        ),
        migrations.AddField(
            model_name='deprecatedpreviewcard',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Status'),
        ),
        migrations.AlterUniqueTogether(
            name='customemoji',
            unique_together={('shortcode', 'domain')},
        ),
        migrations.AddField(
            model_name='conversationmute',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='conversationmute',
            name='conversation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Conversation'),
        ),
        migrations.AddField(
            model_name='block',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='block',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='backup',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='adminactionlog',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='accountmoderationnote',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='accountmoderationnote',
            name='target_account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='accountdomainblock',
            name='account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AddField(
            model_name='account',
            name='moved_to_account',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Account'),
        ),
        migrations.AlterUniqueTogether(
            name='subscription',
            unique_together={('account', 'callback_url')},
        ),
        migrations.AlterUniqueTogether(
            name='statustag',
            unique_together={('tag', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='statuspins',
            unique_together={('account', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='notification',
            unique_together={('account', 'activity_id', 'activity_type')},
        ),
        migrations.AlterUniqueTogether(
            name='mute',
            unique_together={('account', 'target_account')},
        ),
        migrations.AlterUniqueTogether(
            name='mention',
            unique_together={('account', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='listaccount',
            unique_together={('account', 'list')},
        ),
        migrations.AlterUniqueTogether(
            name='followrequest',
            unique_together={('account', 'target_account')},
        ),
        migrations.AlterUniqueTogether(
            name='follow',
            unique_together={('account', 'target_account')},
        ),
        migrations.AlterUniqueTogether(
            name='favourite',
            unique_together={('account', 'status')},
        ),
        migrations.AlterUniqueTogether(
            name='conversationmute',
            unique_together={('account', 'conversation')},
        ),
        migrations.AlterUniqueTogether(
            name='block',
            unique_together={('account', 'target_account')},
        ),
        migrations.AlterUniqueTogether(
            name='accountdomainblock',
            unique_together={('account', 'domain')},
        ),
        migrations.AlterUniqueTogether(
            name='account',
            unique_together={('username', 'domain')},
        ),
        migrations.AddField(
            model_name='user',
            name='invite',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='misaca_federation.Invite'),
        ),
    ]
